"""
IoT and Predictive Maintenance Database Models
Premium feature for real-time equipment monitoring and predictive analytics
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean, ForeignKey, Float, Text, JSON, Numeric
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import Base


class IoTDevice(Base):
    """IoT sensors and devices attached to equipment"""
    __tablename__ = "iot_devices"

    id = Column(Integer, primary_key=True, index=True)
    equipment_id = Column(Integer, ForeignKey("equipment.id"), nullable=False)
    device_id = Column(String(100), unique=True, nullable=False)
    device_type = Column(String(50), nullable=False, default="multi_sensor")
    manufacturer = Column(String(100), default="BitCorp IoT")
    model = Column(String(100))
    firmware_version = Column(String(50), default="1.0.0")
    configuration = Column(JSON, default=dict)
    last_communication = Column(DateTime)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Relationships
    equipment = relationship("Equipment", back_populates="iot_devices")
    sensor_readings = relationship("SensorReading", back_populates="device", cascade="all, delete-orphan")


class SensorReading(Base):
    """Time-series data from IoT sensors"""
    __tablename__ = "sensor_readings"

    id = Column(Integer, primary_key=True, index=True)
    device_id = Column(Integer, ForeignKey("iot_devices.id"), nullable=False)
    sensor_type = Column(String(100), nullable=False)
    value = Column(Numeric(10, 4), nullable=False)
    unit = Column(String(50))
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)
    sensor_metadata = Column(JSON, default=dict)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationships
    device = relationship("IoTDevice", back_populates="sensor_readings")


class MaintenanceAlert(Base):
    """Predictive maintenance alerts generated by AI analysis"""
    __tablename__ = "maintenance_alerts"

    id = Column(Integer, primary_key=True, index=True)
    equipment_id = Column(Integer, ForeignKey("equipment.id"), nullable=False)
    alert_type = Column(String(100), nullable=False)
    severity = Column(String(20), nullable=False)
    message = Column(Text, nullable=False)
    recommended_action = Column(Text, nullable=False)
    is_resolved = Column(Boolean, default=False)
    resolved_at = Column(DateTime(timezone=True))
    resolved_by = Column(Integer, ForeignKey("users.id"))
    resolution_notes = Column(Text)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Relationships
    equipment = relationship("Equipment", back_populates="maintenance_alerts")


class PredictiveModel(Base):
    """AI/ML models for predictive maintenance"""
    __tablename__ = "predictive_models"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(255), nullable=False)
    equipment_type = Column(String(100), nullable=False)
    model_type = Column(String(50), nullable=False)
    version = Column(String(20), nullable=False)
    accuracy_score = Column(Float, nullable=False)
    features = Column(JSON, nullable=False)
    training_data_count = Column(Integer, nullable=False)
    last_trained = Column(DateTime(timezone=True), nullable=False)
    is_active = Column(Boolean, default=True)
    model_parameters = Column(JSON)
    performance_metrics = Column(JSON)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())


class EquipmentHealthScore(Base):
    """Equipment health scores based on IoT data analysis"""
    __tablename__ = "equipment_health_scores"

    id = Column(Integer, primary_key=True, index=True)
    equipment_id = Column(Integer, ForeignKey("equipment.id"), nullable=False)
    overall_score = Column(Float, nullable=False)  # 0-100
    engine_health = Column(Float, nullable=False)
    hydraulic_health = Column(Float, nullable=False)
    transmission_health = Column(Float, nullable=False)
    electrical_health = Column(Float, nullable=False)
    structural_health = Column(Float, nullable=False)
    predicted_failures = Column(JSON, default=list)
    recommendations = Column(JSON, default=list)
    confidence_score = Column(Float, nullable=False)
    analysis_timestamp = Column(DateTime(timezone=True), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationships
    equipment = relationship("Equipment", back_populates="health_scores")
